--- /home/dayrain/.build/dwl-v0.7/dwl.c
+++ dwl.c
@@ -2692,7 +2692,7 @@
 tile(Monitor *m)
 {
 	unsigned int mw, my, ty;
-	int i, extra, n = 0;
+	int i, n = 0;
 	Client *c;
 
 	wl_list_for_each(c, &clients, link)
@@ -2705,20 +2705,18 @@
 		mw = m->nmaster ? (int)roundf(m->w.width * m->mfact) : 0;
 	else
 		mw = m->w.width;
-	i = 0;
-	my = ty = gaps;
-	extra = gaps / 2 * (n > m->nmaster && m->nmaster > 0);
+	i = my = ty = 0;
 	wl_list_for_each(c, &clients, link) {
 		if (!VISIBLEON(c, m) || c->isfloating || c->isfullscreen)
 			continue;
 		if (i < m->nmaster) {
-			resize(c, (struct wlr_box){.x = m->w.x + gaps, .y = m->w.y + my, .width = mw - 2 * gaps + extra,
-				.height = (m->w.height - my) / (MIN(n, m->nmaster) - i) - gaps}, 0);
-			my += c->geom.height + gaps;
+			resize(c, (struct wlr_box){.x = m->w.x, .y = m->w.y + my, .width = mw,
+				.height = (m->w.height - my) / (MIN(n, m->nmaster) - i)}, 0);
+			my += c->geom.height;
 		} else {
-			resize(c, (struct wlr_box){.x = m->w.x + mw + gaps - extra, .y = m->w.y + ty,
-				.width = m->w.width - mw - 2 * gaps + extra, .height = (m->w.height - ty) / (n - i) - gaps}, 0);
-			ty += c->geom.height + gaps;
+			resize(c, (struct wlr_box){.x = m->w.x + mw, .y = m->w.y + ty,
+				.width = m->w.width - mw, .height = (m->w.height - ty) / (n - i)}, 0);
+			ty += c->geom.height;
 		}
 		i++;
 	}
